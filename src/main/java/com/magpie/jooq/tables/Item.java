/*
 * This file is generated by jOOQ.
 */
package com.magpie.jooq.tables;


import com.magpie.jooq.Indexes;
import com.magpie.jooq.Keys;
import com.magpie.jooq.Magpie;
import com.magpie.jooq.tables.records.ItemRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Item extends TableImpl<ItemRecord> {

    private static final long serialVersionUID = 415254454;

    /**
     * The reference instance of <code>magpie.item</code>
     */
    public static final Item ITEM = new Item();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemRecord> getRecordType() {
        return ItemRecord.class;
    }

    /**
     * The column <code>magpie.item.id</code>.
     */
    public final TableField<ItemRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>magpie.item.currency</code>.
     */
    public final TableField<ItemRecord, String> CURRENCY = createField(DSL.name("currency"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>magpie.item.description</code>.
     */
    public final TableField<ItemRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>magpie.item.location_id</code>.
     */
    public final TableField<ItemRecord, Integer> LOCATION_ID = createField(DSL.name("location_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>magpie.item.nego_fg</code>.
     */
    public final TableField<ItemRecord, String> NEGO_FG = createField(DSL.name("nego_fg"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>magpie.item.price</code>.
     */
    public final TableField<ItemRecord, Integer> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>magpie.item.status</code>.
     */
    public final TableField<ItemRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.CHAR(2).nullable(false), this, "");

    /**
     * The column <code>magpie.item.title</code>.
     */
    public final TableField<ItemRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>magpie.item.category_id</code>.
     */
    public final TableField<ItemRecord, Integer> CATEGORY_ID = createField(DSL.name("category_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>magpie.item.seller_id</code>.
     */
    public final TableField<ItemRecord, Integer> SELLER_ID = createField(DSL.name("seller_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>magpie.item</code> table reference
     */
    public Item() {
        this(DSL.name("item"), null);
    }

    /**
     * Create an aliased <code>magpie.item</code> table reference
     */
    public Item(String alias) {
        this(DSL.name(alias), ITEM);
    }

    /**
     * Create an aliased <code>magpie.item</code> table reference
     */
    public Item(Name alias) {
        this(alias, ITEM);
    }

    private Item(Name alias, Table<ItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private Item(Name alias, Table<ItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Item(Table<O> child, ForeignKey<O, ItemRecord> key) {
        super(child, key, ITEM);
    }

    @Override
    public Schema getSchema() {
        return Magpie.MAGPIE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ITEM_FK2N9W8D0DP4BSFRA9DCG0046L4, Indexes.ITEM_FK8GWMXR8C03VTEK0YQ8IW9J2MB, Indexes.ITEM_PRIMARY);
    }

    @Override
    public Identity<ItemRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ITEM;
    }

    @Override
    public UniqueKey<ItemRecord> getPrimaryKey() {
        return Keys.KEY_ITEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<ItemRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemRecord>>asList(Keys.KEY_ITEM_PRIMARY);
    }

    @Override
    public List<ForeignKey<ItemRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ItemRecord, ?>>asList(Keys.FK2N9W8D0DP4BSFRA9DCG0046L4, Keys.FK8GWMXR8C03VTEK0YQ8IW9J2MB);
    }

    public Category category() {
        return new Category(this, Keys.FK2N9W8D0DP4BSFRA9DCG0046L4);
    }

    public User user() {
        return new User(this, Keys.FK8GWMXR8C03VTEK0YQ8IW9J2MB);
    }

    @Override
    public Item as(String alias) {
        return new Item(DSL.name(alias), this);
    }

    @Override
    public Item as(Name alias) {
        return new Item(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Item rename(String name) {
        return new Item(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Item rename(Name name) {
        return new Item(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, Integer, String, Integer, String, String, Integer, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
