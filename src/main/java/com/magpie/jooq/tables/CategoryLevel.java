/*
 * This file is generated by jOOQ.
 */
package com.magpie.jooq.tables;


import com.magpie.jooq.Indexes;
import com.magpie.jooq.Keys;
import com.magpie.jooq.Magpie;
import com.magpie.jooq.tables.records.CategoryLevelRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryLevel extends TableImpl<CategoryLevelRecord> {

    private static final long serialVersionUID = 1755482054;

    /**
     * The reference instance of <code>magpie.category_level</code>
     */
    public static final CategoryLevel CATEGORY_LEVEL = new CategoryLevel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoryLevelRecord> getRecordType() {
        return CategoryLevelRecord.class;
    }

    /**
     * The column <code>magpie.category_level.id</code>.
     */
    public final TableField<CategoryLevelRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>magpie.category_level.level1</code>.
     */
    public final TableField<CategoryLevelRecord, String> LEVEL1 = createField(DSL.name("level1"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>magpie.category_level.level2</code>.
     */
    public final TableField<CategoryLevelRecord, String> LEVEL2 = createField(DSL.name("level2"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>magpie.category_level.level3</code>.
     */
    public final TableField<CategoryLevelRecord, String> LEVEL3 = createField(DSL.name("level3"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>magpie.category_level.level3_id</code>.
     */
    public final TableField<CategoryLevelRecord, Integer> LEVEL3_ID = createField(DSL.name("level3_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>magpie.category_level</code> table reference
     */
    public CategoryLevel() {
        this(DSL.name("category_level"), null);
    }

    /**
     * Create an aliased <code>magpie.category_level</code> table reference
     */
    public CategoryLevel(String alias) {
        this(DSL.name(alias), CATEGORY_LEVEL);
    }

    /**
     * Create an aliased <code>magpie.category_level</code> table reference
     */
    public CategoryLevel(Name alias) {
        this(alias, CATEGORY_LEVEL);
    }

    private CategoryLevel(Name alias, Table<CategoryLevelRecord> aliased) {
        this(alias, aliased, null);
    }

    private CategoryLevel(Name alias, Table<CategoryLevelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CategoryLevel(Table<O> child, ForeignKey<O, CategoryLevelRecord> key) {
        super(child, key, CATEGORY_LEVEL);
    }

    @Override
    public Schema getSchema() {
        return Magpie.MAGPIE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CATEGORY_LEVEL_PRIMARY);
    }

    @Override
    public Identity<CategoryLevelRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CATEGORY_LEVEL;
    }

    @Override
    public UniqueKey<CategoryLevelRecord> getPrimaryKey() {
        return Keys.KEY_CATEGORY_LEVEL_PRIMARY;
    }

    @Override
    public List<UniqueKey<CategoryLevelRecord>> getKeys() {
        return Arrays.<UniqueKey<CategoryLevelRecord>>asList(Keys.KEY_CATEGORY_LEVEL_PRIMARY);
    }

    @Override
    public CategoryLevel as(String alias) {
        return new CategoryLevel(DSL.name(alias), this);
    }

    @Override
    public CategoryLevel as(Name alias) {
        return new CategoryLevel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryLevel rename(String name) {
        return new CategoryLevel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryLevel rename(Name name) {
        return new CategoryLevel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
